//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: Animal Crossing GCI Save File Template
//   Authors: Cuyler
//   Version: 0.1
//   Purpose: Shows various save file structures for Animal Crossing GCI save files
//  Category: Save File Template
// File Mask: 
//  ID Bytes: 
//   History: 
//      TODO: Camper
//------------------------------------------------

FSeek(0x1504);

struct MAIL {
    char receipiantName[8];
    char townName[8];
    ushort receipiantId < format=hex >;
    ushort townId < format=hex >;
    ushort unknown1 < format=hex >;
    char senderName[8];
    char senderTownName[8];
    ushort senderId < format=hex >;
    ushort senderTownId < format=hex >;
    byte eventType < format=hex >; // Unsure about this
    byte unknown2 < format=hex >;
    ushort presentId < format=hex >;
    byte read < format=hex >;
    byte unknown3 < format=hex >;
    byte senderType < format=hex >; // Don't know about this
    byte stationaryItemIdLowerByte < format=hex >;
    char body[0xF8];
} savedLetters[160]; // struct size: 0x12A

FSeek(0xCFE0);

struct PATTERN {
    char name[16];
    byte palette < format=hex >;
    byte unused[15] < format=hex >;
    byte doublePixelDataArray[0x200] < format=hex >;
} savedPatterns[96];

FSeek(0x19C00);

struct DIARY {
    byte unknownDiaryBytes[2];
    struct PLAYER_ENTRIES {
        struct MONTH_ENTRY {
            char entry[0x3E0];
        } monthEntry[12];
    } playerEntries[4];
} diary;

FSeek(0x26040);

struct AC_SAVE {
    struct HEADER {
        int static < format=hex >;
        char gameId[4];
        ushort townId < format=hex >;
        
        struct DATE {
            byte second;
            byte minute;
            byte hour;
            byte day;
            byte dayOfWeek < comment=DayOfWeek >;
            byte month < comment=MonthString >;
            ushort year;
        } lastPlayDate < comment=DateString >; // may not be "last play" date
    
        ushort checksum < format=hex >;
        int gameState < format=hex,comment="Usually 0x22. Don't mess with this." >;
        byte villagerCount < format=hex,comment="This doesn't include the islander" >;
        byte villagerLeavingIndex < format=hex,comment="The villager who left/is leaving. Will be 0xFF if no one is leaving." >;
        byte unknownHeaderData2[6];
    } header;

    struct PLAYER {
        char name[8];
        char townName[8];
        ushort playerId < format=hex >;
        ushort townId < format=hex >;
        byte gender < format=hex,comment=PlayerGender >;
        byte faceType < format=hex >;
        byte resetCount < format=hex >;
        byte unknown < format=hex >;
        int padding[20] < format=hex >;
        struct INVENTORY {
            ushort itemId[15] < format=hex >;
        } inventory;
        ushort padding1 < format=hex >;
        int padding2 < format=hex >;
        uint bells < format=decimal >;
        uint debt < format=decimal >;
        int padding3[260] < format=hex >;
        ushort heldItem < format=hex >;
        ushort padding4 < format=hex >;
        char unknownLetterStrings[0x38] < format=hex >;
        MAIL mail[10];
        ushort pocketsBackgroundItem < format=hex >;
        int padding5 < format=hex >;
        ushort shirt < format=hex >;
        int padding6[6] < format=hex >;
        ushort padding7 < format=hex >;
        struct BIRTHDAY {
            byte month < comment=MonthString >;
            byte day;
        } birthday < comment=BirthdayString >;
        int padding8[19] < format=hex >;
        int resetCode < format=hex >;
        int bitmapData[77] < format=hex >; // research this more
        uint savings < format=decimal >;
        int padding9[4] < format=hex >;
        PATTERN pattern[8];
        int padding10[34] < format=hex >; // Padding dictates unknowns.
        byte tan < format=hex >;
        byte padding11[3] < format=hex >;
        int padding12[29] < format=hex >;
    } player[4];
    char townName[8];
    ushort static2 < format=hex >;
    ushort townId < format=hex >;

    struct MESSAGEBOARD_POST {
        char body[0xC0];
        DATE postDate < comment=DateString >;
    } messageBoardPost[15];
    
    int messageBoardPadding;

    struct HOUSE {
        char ownerName[8];
        char townName[8];
        ushort ownerId < format=hex >;
        ushort townId < format=hex >;
        byte houseFlags[0x18] < format=hex >;
        byte roofColor < format=hex >;
        byte roofColorTomorrow < format=hex >;
        ushort housePadding < format=hex >;
        int housePadding2[2] < format=hex >;
        
        struct ROOM {
            struct LAYER {
                ushort items[0x100] < format=hex >;
                byte itemsEnabledBitmap[0x20] < format=binary >; // each byte has 8 floor spaces attributed to it.
                int layerPadding[2] < format=hex >;
            } layer[4];
            byte carpetLowerByte < format=hex >;
            byte wallpaperLowerByte < format=hex >;
            byte unknown[6] < format=hex >;
        } room[3];

        MAIL mail[10];

        struct GYROID {

            struct GYROID_ITEM {
                ushort itemId < format=hex >;
                byte unknown < format=hex >;
                byte sellType < format=hex >;
                uint sellPrice < format=decimal >;
            } gyroidItem[4];
            
            char message[0x80];
        } gyroid;

        int gyroidPadding < format=hex >;
        DATE enterDate < comment=DateString >; // may not be enter but it's a date
        byte cockroachCount < format=hex >;
        byte houseEndPadding[0x2F] < format=hex >;
    } house[4];

    struct TOWN {
        struct TOWN_ACRE_ITEMS {
            ushort items[256] < format=hex >;
        } townAcreItems[30];

        ushort townAcreId[70] < format=hex >;
    } town;

    int townEndPadding;
    
    struct VILLAGER {
        ushort villagerId < format=hex >;
        ushort townId < format=hex >;
        char townName[8];
        byte speechType < format=hex >; // Usually the lower byte of the villager id. 0xFF for islanders.
        byte personality < format=hex >;
        ushort padding < format=hex >;
        
        struct PLAYER_ENTRY {
            char playerName[8];
            char playerTownName[8];
            ushort playerId < format=hex >;
            ushort playerTownId < format=hex >;
            DATE metDate < comment=DateString >;
            char metTownName[8]; // unsure about if it's the "met" town name.
            ushort metTownId < format=hex >;
            byte unknown[10] < format=hex >;
            byte friendship < format=hex,comment=RealFriendshipValue >;
            byte playerEntryFlags < format=binary,comment="Bit 5 (0x20) is the 're-mail' flag." >;
            byte unknown2[0x1D];
            char savedLetter[0xC0] < format=hex >;
            byte unknown3[0x29] < format=hex >;
        } playerEntry[7];

        byte unknownByte < format=hex >;
        struct HOUSE_COORDINATES {
            byte xAcre < format=hex >;
            byte yAcre < format=hex >;
            byte xPosition < format=hex >;
            byte yPosition < format=hex >;
        } houseCoordinates;
        char catchphrase[10];
        byte unknownByte2 < format=hex >;
        byte unknownData[14] < format=hex >;
        char unknownCharArray1[8]; // probably something to do with player(s)
        char unknownCharArray2[8];
        ushort unknownShort1 < format=hex >;
        ushort unknownShort2 < format=hex >;
        byte unknownData2[6] < format=hex >;
        char somePlayerName[8];
        char unknownCharArray3[8];
        int charArrayPadding < format=hex >;
        ushort shirt < format=hex >;
        byte unknownData3[7] < format=hex >;
        byte villagerSchedule < format=hex >;
        ushort villagerPresentShirt < format=hex,comment="This may be the shirt a villager wears if given one as a presnet." >;
        byte villagerRelations[15] < format=hex,comment="The villager's relationships with other villagers." >; // Not sure about this
        byte unknownData4[0x89] < format=hex >;
    } villager[15];

    struct LAST_VILLAGER_WHO_LEFT {
        ushort villagerId < format=hex >;
        ushort originalTownId < format=hex >;
        char originalTownName[8];
        int unknown < format=hex >;
        ushort shirt < format=hex >;
        int unknown < format=hex >;
    } lastVillagerWhoLeft;

    byte unknownAfterVillagerData[0xC8] < format=hex >; // some string stuff
    
    struct NOOKS_SHOP {
        ushort items[24] < format=hex >;
        byte unknownShopData[0x28] < format=hex >;
        byte shopLevelUpper2Bits < format=binary,comment=ShopSize >;
        byte unknownShopByte < format=hex >;
        uint shopPurchaseSum < format=decimal >; // must be greater or equal to 240,000 for Nookingtons
        DATE shopDate1 < comment=DateString >; // two unknown dates
        DATE shopDate2 < comment=DateString >;
        int visitorHasPurchasedFlag < format=hex,comment="if set to 1, a visitor for another town has bought an item. This is required to be one for nookingtons (also must have a total sale sum of 240,000 bells)" >;
    } nooksShop;
    
    byte unknownAfterNooksShopData[0x21C] < format=hex >;
    MAIL unknownMail[7]; // Sent mail?
    byte unknownPreBuriedData[6] < format=hex >;
    DATE policeStationRefreshDate < comment=DateString >;
    ushort policeStationLostAndFoundItems[21] < format=hex >;
    byte unknownAfterLostAndFoundData[14] < format=hex >;
    byte townTuneData[8] < format=hex,comment="Each nibble represents one of the 16 tune slots." >;
    byte unknownAfterTownTuneData[12] < format=hex >; // Seems to contain a short date (year, month)
    byte buriedBitmap[0x3C0] < format=binary >;
    DATE nextVillagerMoveInDate < comment=DateString >;
    byte unknownAfterBuriedData[0x6A] < format=hex >;
    byte villagersWhoLivedInYourTownBitmap[0x1F] < format=binary,comment="A bitmap of any villagers who have ever lived in your town." >; // Not 100% sure on this.
    byte unknownAfterVillagerBitmapData[0x93] < format=hex >;
    PATTERN ableSistersPatterns[8];
    byte unknownAfterAbleSistersData[0x40] < format=hex >;

    struct ISLAND {
        char islandName[8];
        char townName[8];
        ushort staticIslandId < format=hex >;
        ushort townId < format=hex >;
        TOWN_ACRE_ITEMS islandAcreItems[2];
        byte acreItemsPadding[0xC] < format=hex >;
        ROOM islandCabana;
        byte cabanaUnknownAfterData[0x238] < format=hex >;
        VILLAGER islander; // Should make a custom struct. Islander's player entires can include a furniture item to customize their house.
        byte islandBuriedBitmap[0x40] < format=binary >;
        byte unknownIslandData[0x118] < format=hex >;
        PATTERN flag;
    } island;

    byte unknownAfterIslandData[0x44] < format=hex >;
    byte townGrassType < format=hex,comment=GrassType >;
    byte unknownEndData[0x1E7B] < format=hex >;
} save;

AC_SAVE secondCopy;

// Comment functions
string GrassType(byte GrassValue)
{
    switch(GrassValue)
    {
        case 0x00:
            return "Grass Type: Triangle";
        case 0x01:
            return "Grass Type: Square";
        case 0x02:
            return "Grass Type: Circle";
        default:
            return "Unknown Grass Type";
    }
}

string ShopSize(byte ShopValue)
{
    byte realValue = ShopValue >> 6;
    realValue &= 3;
    
    switch(realValue)
    {
        case 0x00:
            return "Shop: Nook's Cranny";
        case 0x01:
            return "Shop: Nook 'n' Go";
        case 0x02:
            return "Shop: Nookway OR Nookingtons [if visitor flag is set to 1]";
        default:
            return "Unknown Shop Size";
    }
}

string PlayerGender(byte Gender)
{
    switch(Gender)
    {
        case 0x00:
            return "Gender: Male";
        case 0x01:
            return "Gender: Female";
        default:
            return "Invalid Gender";
    }
}

string DayOfWeek(byte WeekDay)
{
    switch (WeekDay)
    {
        case 0x00:
            return "Sunday";
        case 0x01:
            return "Monday";
        case 0x02:
            return "Tuesday";
        case 0x03:
            return "Wednesday";
        case 0x04:
            return "Thursday";
        case 0x05:
            return "Friday";
        case 0x06:
            return "Saturday";
        default:
            return "Invalid Week Day";
    }
}

string MonthString(byte Month)
{
    switch (Month)
    {
        case 0x01:
            return "Januaray";
        case 0x02:
            return "February";
        case 0x03:
            return "March";
        case 0x04:
            return "April";
        case 0x05:
            return "May";
        case 0x06:
            return "June";
        case 0x07:
            return "July";
        case 0x08:
            return "August";
        case 0x09:
            return "September";
        case 0x0A:
            return "October";
        case 0x0B:
            return "November";
        case 0x0C:
            return "December";
        default:
            return "Invalid Month Value";
    }
}

string DayString(byte Day)
{
    string day;

    SPrintf(day, "%d", Day);

    if (Day > 10 && Day < 20)
        day += "th";
    else if (Day % 10 == 1)
        day += "st";
    else if (Day % 10 == 2)
        day += "nd";
    else if (Day % 10 == 3)
        day += "rd";
    else
        day += "th";

    return day;
}

string HourString(byte Hour)
{
    string hour;

    if (Hour == 0)
        return "12";
    else if (Hour > 12)
        SPrintf(hour, "%d", Hour - 12);
    else
        SPrintf(hour, "%d", Hour);
    
    return hour; 
}

string GetAmPm(byte hour)
{
    if (hour < 12)
        return "AM";
    else
        return "PM";
}

string DateString(DATE &date)
{
    string year;
    string minute;
    string second;

    SPrintf(year, "%d", date.year);
    SPrintf(minute, "%02d", date.minute);
    SPrintf(second, "%02d", date.second);
    
    return DayOfWeek(date.dayOfWeek) + ", " + MonthString(date.month) + " "
        + DayString(date.day) + ", " + year + " at " + HourString(date.hour) + ":"
        + minute + ":" + second + " " + GetAmPm(date.hour);
}

string BirthdayString(BIRTHDAY &birthday)
{
    return MonthString(birthday.month) + " " + DayString(birthday.day);
}

string RealFriendshipValue(byte Friendship)
{
    string friendship;
    if (Friendship < 1)
        return "Invalid friendship level. Needs to be between 0x01 and 0x7F.";
    SPrintf(friendship, "%d", Friendship - 1);

    return "Real friendship level: " + friendship;
}